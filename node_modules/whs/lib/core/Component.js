'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = exports.getWorld = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _three = require('three');

var _minivents = require('minivents');

var _minivents2 = _interopRequireDefault(_minivents);

var _index = require('../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getWorld = exports.getWorld = function getWorld(parent) {
  var world = parent;
  while (!world.scene) {
    world = world.parent;
  }return world;
};

var Component = (_temp = _class = function (_Events) {
  (0, _inherits3.default)(Component, _Events);
  (0, _createClass3.default)(Component, null, [{
    key: 'applyDecorator',
    value: function applyDecorator(component, decorator) {
      component.prototype = decorator(component).prototype;
      return component;
    }
  }]);

  function Component() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var instructions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck3.default)(this, Component);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Component.__proto__ || Object.getPrototypeOf(Component)).call(this));

    _this._wait = [];
    _this._helpers = [];
    _this.children = [];
    _this.params = {};


    if (obj instanceof _three.Object3D) _this.native = obj;else _this.params = (0, _index.extend)((0, _index.transformData)(obj, instructions), defaults);

    _this.callConstructor(_this);
    return _this;
  }

  (0, _createClass3.default)(Component, [{
    key: 'wait',
    value: function wait(promise) {
      if (promise) this._wait.push(promise);
      return Promise.all(this._wait);
    }
  }, {
    key: 'callConstructor',
    value: function callConstructor() {}
  }, {
    key: 'callWrap',
    value: function callWrap() {}
  }, {
    key: 'callAddTo',
    value: function callAddTo() {}
  }, {
    key: 'callCopy',
    value: function callCopy() {}
  }, {
    key: 'wrap',
    value: function wrap() {
      var _this2 = this;

      for (var _len = arguments.length, tags = Array(_len), _key = 0; _key < _len; _key++) {
        tags[_key] = arguments[_key];
      }

      return new Promise(function (resolve) {
        var _wrap = function _wrap() {
          if (tags.indexOf('no-transforms') < 0) _this2.wrapTransforms();

          _this2.callWrap.apply(_this2, [_this2].concat(tags));
          resolve(_this2);
        };

        if (_this2._wait.length > 0) Promise.all(_this2._wait).then(_wrap);else _wrap();
      });
    }
  }, {
    key: 'wrapTransforms',
    value: function wrapTransforms() {}
  }, {
    key: 'addTo',
    value: function addTo(parent) {
      var _this3 = this;

      this.parent = parent;

      return new Promise(function (resolve, reject) {
        var _add = function _add() {
          var native = _this3.native,
              params = _this3.params,
              parent = _this3.parent;


          if (!native) reject();

          var parentNative = 'scene' in parent ? parent.scene : parent.native;

          parentNative.add(native);
          parent.children.push(_this3);

          if (typeof params.helpers === 'undefined') params.helpers = {};

          for (var key in _this3._helpers) {
            if (_this3._helpers[key]) parentNative.add(_this3._helpers[key]);
          }_this3.callAddTo(_this3);
          resolve(_this3);
        };

        if (_this3._wait.length > 0) Promise.all(_this3._wait).then(_add);else _add();
      });
    }
  }, {
    key: 'updateParams',
    value: function updateParams() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.params = (0, _index.extend)(params, this.params);
      return this.params;
    }
  }, {
    key: 'add',
    value: function add(children) {
      var _this4 = this;

      if (children.addTo) return children.addTo(this);else if (children instanceof Component) {
        return new Promise(function (resolve) {
          children.parent = _this4;

          _this4.native.add(children.native);
          _this4.children.push(_this4);

          resolve();
        });
      }
    }
  }, {
    key: 'addHelper',
    value: function addHelper(name) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var helpers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Component.helpers;

      var helper = helpers[name];
      var data = helper[1] ? (0, _index.toArray)((0, _index.extend)(params, helper[1]), helper[2]) : [];

      this._helpers[name] = new (Function.prototype.bind.apply(helper[0], [null].concat([this.native], (0, _toConsumableArray3.default)(data))))();
      if (this.parent) getWorld(this.parent).scene.add(this._helpers[name]);
    }
  }, {
    key: 'remove',
    value: function remove(source) {
      this.native.remove(source.native);

      this.children.splice(this.children.indexOf(source), 1);
      source.parent = null;
      source.emit('remove');

      return this;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new Component(this.params).copy(this);
    }
  }, {
    key: 'copy',
    value: function copy(source) {
      var sourceNative = source.native;

      if (sourceNative) {
        this.native = sourceNative.clone(source.params);
        this.params = (0, _extends3.default)({}, source.params);
        this.wrap();
      } else this.params = source.params;

      this.callCopy(this);

      return this;
    }
  }, {
    key: 'show',


    /* VISIBILITY */
    value: function show() {
      this.native.visible = true;
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.native.visible = false;
    }
  }, {
    key: 'native',
    get: function get() {
      return this._native;
    },
    set: function set(mesh) {
      this._native = mesh;
      return this._native;
    }
  }]);
  return Component;
}(_minivents2.default), _class.defaults = {}, _class.instructions = {}, _class.helpers = {}, _temp);
exports.Component = Component;