'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.physicsDefaults = exports.PhysicsComponent = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _three = require('three');

var _index = require('../physics/index.js');

var Physijs = _interopRequireWildcard(_index);

var _ComponentUtils = require('../utils/ComponentUtils');

var _index2 = require('../utils/index');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var physicsDefaults = Physijs.default === false ? false : {
  restitution: 0.3,
  friction: 0.8,
  damping: 0,
  pressure: 100,
  margin: 0,
  klst: 0.9,
  kvst: 0.9,
  kast: 0.9
};

function PhysicsComponent(targetComponent) {
  var _class, _temp;

  var resultComponent = (_temp = _class = function (_targetComponent) {
    (0, _inherits3.default)(PhysicsComponentEnhance, _targetComponent);

    function PhysicsComponentEnhance() {
      (0, _classCallCheck3.default)(this, PhysicsComponentEnhance);
      return (0, _possibleConstructorReturn3.default)(this, (PhysicsComponentEnhance.__proto__ || Object.getPrototypeOf(PhysicsComponentEnhance)).apply(this, arguments));
    }

    (0, _createClass3.default)(PhysicsComponentEnhance, [{
      key: 'setAngularVelocity',
      value: function setAngularVelocity() {
        var _native;

        return (_native = this.native).setAngularVelocity.apply(_native, arguments);
      }
    }, {
      key: 'setLinearVelocity',
      value: function setLinearVelocity() {
        var _native2;

        return (_native2 = this.native).setLinearVelocity.apply(_native2, arguments);
      }
    }, {
      key: 'applyCentralImpulse',
      value: function applyCentralImpulse() {
        var _native3;

        return (_native3 = this.native).applyCentralImpulse.apply(_native3, arguments);
      }
    }, {
      key: 'applyImpulse',
      value: function applyImpulse() {
        var _native4;

        return (_native4 = this.native).applyImpulse.apply(_native4, arguments);
      }
    }, {
      key: 'applyTorque',
      value: function applyTorque() {
        var _native5;

        return (_native5 = this.native).applyTorque.apply(_native5, arguments);
      }
    }, {
      key: 'applyCentralForce',
      value: function applyCentralForce() {
        var _native6;

        return (_native6 = this.native).applyCentralForce.apply(_native6, arguments);
      }
    }, {
      key: 'applyForce',
      value: function applyForce() {
        var _native7;

        return (_native7 = this.native).applyForce.apply(_native7, arguments);
      }
    }, {
      key: 'getAngularVelocity',
      value: function getAngularVelocity() {
        var _native8;

        return (_native8 = this.native).getAngularVelocity.apply(_native8, arguments);
      }
    }, {
      key: 'getLinearVelocity',
      value: function getLinearVelocity() {
        var _native9;

        return (_native9 = this.native).getLinearVelocity.apply(_native9, arguments);
      }
    }, {
      key: 'setAngularFactor',
      value: function setAngularFactor() {
        var _native10;

        return (_native10 = this.native).setAngularFactor.apply(_native10, arguments);
      }
    }, {
      key: 'setLinearFactor',
      value: function setLinearFactor() {
        var _native11;

        return (_native11 = this.native).setLinearFactor.apply(_native11, arguments);
      }
    }, {
      key: 'setDamping',
      value: function setDamping() {
        var _native12;

        return (_native12 = this.native).setDamping.apply(_native12, arguments);
      }
    }, {
      key: 'setCcdMotionThreshold',
      value: function setCcdMotionThreshold() {
        var _native13;

        return (_native13 = this.native).setCcdMotionThreshold.apply(_native13, arguments);
      }
    }, {
      key: 'setCcdSweptSphereRadius',
      value: function setCcdSweptSphereRadius() {
        var _native14;

        return (_native14 = this.native).setCcdSweptSphereRadius.apply(_native14, arguments);
      }
    }, {
      key: 'appendAnchor',
      value: function appendAnchor(world, object, node, influence) {
        var collisionBetweenLinkedBodies = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        return this.native.appendAnchor(world.scene, object.native, node, influence, collisionBetweenLinkedBodies);
      }
    }, {
      key: 'copy',
      value: function copy(source) {
        var sourceNative = source.native;

        if (sourceNative) {
          this.native = sourceNative.clone(source.params);
          this.native.mass = sourceNative.mass;
          this.params = (0, _extends3.default)({}, source.params);

          this.wrap('no-transforms');

          this.position.copy(source.position);
          this.rotation.copy(source.rotation);
        } else this.params = source.params;

        execAdditional(this.exec.callCopy, this, sourceNative);

        return this;
      }
    }, {
      key: 'position',
      get: function get() {
        return this.native.position;
      },
      set: function set(vector3) {
        var pos = this._native.position,
            native = this._native;

        Object.defineProperties(pos, {
          x: {
            get: function get() {
              return this._x;
            },
            set: function set(x) {
              native.__dirtyPosition = true;
              this._x = x;
            }
          },
          y: {
            get: function get() {
              return this._y;
            },
            set: function set(y) {
              native.__dirtyPosition = true;
              this._y = y;
            }
          },
          z: {
            get: function get() {
              return this._z;
            },
            set: function set(z) {
              native.__dirtyPosition = true;
              this._z = z;
            }
          }
        });

        native.__dirtyPosition = true;

        pos.copy(vector3);
      }
    }, {
      key: 'quaternion',
      get: function get() {
        this.__c_rot = true;
        return this.native.quaternion;
      },
      set: function set(quaternion) {
        var _this2 = this;

        var quat = this._native.quaternion,
            native = this._native;

        quat.copy(quaternion);

        quat.onChange(function () {
          if (_this2.__c_rot) {
            if (native.__dirtyRotation === true) {
              _this2.__c_rot = false;
              native.__dirtyRotation = false;
            }
            native.__dirtyRotation = true;
          }
        });
      }
    }, {
      key: 'rotation',
      get: function get() {
        this.__c_rot = true;
        return this._native.rotation;
      },
      set: function set(euler) {
        var _this3 = this;

        var rot = this._native.rotation,
            native = this._native;

        rot.copy(euler);

        rot.onChange(function () {
          if (_this3.__c_rot) {
            _this3.quaternion.copy(new _three.Quaternion().setFromEuler(rot));
            native.__dirtyRotation = true;
          }
        });
      }
    }, {
      key: 'native',
      get: function get() {
        return this._native;
      },
      set: function set(mesh) {
        this._native = mesh;

        if (mesh instanceof _three.Object3D) {
          this.position = mesh.position.clone();
          this.quaternion = mesh.quaternion.clone();
          this.rotation = mesh.rotation.clone();
        }
      }
    }]);
    return PhysicsComponentEnhance;
  }(targetComponent), _class.defautls = (0, _index2.extend)(targetComponent.defaults, {
    mass: 10,
    physics: physicsDefaults
  }), _temp);

  (0, _ComponentUtils.$wrap)(resultComponent).onCallConstructor(function (scope) {
    scope.physics = scope.params.physics !== undefined ? scope.params.physics : Physijs.default !== false;
    scope.__c_rot = false;
  });

  (0, _ComponentUtils.$wrap)(resultComponent).onCallAddTo(function (scope) {
    scope.native.addEventListener('collision', function () {
      scope.emit('collide');
    });
  });

  return resultComponent;
}

exports.PhysicsComponent = PhysicsComponent;
exports.physicsDefaults = physicsDefaults;