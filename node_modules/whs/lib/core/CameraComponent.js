'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CameraComponent = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _three = require('three');

var _ComponentUtils = require('../utils/ComponentUtils');

var _index = require('../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CameraComponent(targetComponent) {
  var _class, _temp;

  var resultComponent = (_temp = _class = function (_targetComponent) {
    (0, _inherits3.default)(CameraComponentEnhance, _targetComponent);

    function CameraComponentEnhance() {
      var _ref;

      (0, _classCallCheck3.default)(this, CameraComponentEnhance);

      for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }

      var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = CameraComponentEnhance.__proto__ || Object.getPrototypeOf(CameraComponentEnhance)).call.apply(_ref, [this].concat(props)));

      _this.helper = null;
      if (_this.native instanceof _three.Object3D) _this.params = CameraComponentEnhance.defaults;
      return _this;
    }

    (0, _createClass3.default)(CameraComponentEnhance, [{
      key: 'lookAt',
      value: function lookAt() {
        var _native2;

        return (_native2 = this.native).lookAt.apply(_native2, arguments);
      }
    }, {
      key: 'copy',
      value: function copy(source) {
        if (source.native) {
          this.native = source.native.clone();
          this.params = (0, _extends3.default)({}, source.params);

          if (source.helper) this.helper = source.helper.clone();
          if (source.target) this.target = source.target.clone();
          this.wrap();

          this.position = source.position.clone();
          this.rotation = source.rotation.clone();
        } else this.params = source.params;

        this.callCopy(this);

        return this;
      }
    }, {
      key: 'clone',
      value: function clone() {
        return new resultComponent({ build: false }).copy(this);
      }
    }, {
      key: 'position',
      get: function get() {
        return this.native.position;
      },
      set: function set(vector3) {
        this.native.position.copy(vector3);
        return this.native.position;
      }
    }, {
      key: 'quaternion',
      get: function get() {
        return this.native.quaternion;
      },
      set: function set(quaternion) {
        this.native.quaternion.copy(quaternion);
        return this.native.quaternion;
      }
    }, {
      key: 'rotation',
      get: function get() {
        return this._native.rotation;
      },
      set: function set(euler) {
        this.native.rotation.copy(euler);
        return this.native.rotation;
      }
    }, {
      key: 'target',
      get: function get() {
        return this.native.target;
      },
      set: function set(vector3) {
        if (vector3 instanceof _three.Object3D) this.native.target.copy(vector3); // THREE.Object3D in this case.
        else this.native.target.position.copy(vector3);
      }
    }]);
    return CameraComponentEnhance;
  }(targetComponent), _class.defautls = (0, _index.extend)(targetComponent.defaults, {
    helper: false,

    position: { x: 0, y: 0, z: 0 },
    rotation: { x: 0, y: 0, z: 0 },
    target: { x: 0, y: 0, z: 0 }
  }), _class.instructions = function () {
    return targetComponent.instructions = (0, _extends3.default)({}, targetComponent.instructions, {
      position: ['x', 'y', 'z'],
      rotation: ['x', 'y', 'z'],
      target: ['x', 'y', 'z']
    });
  }(), _temp);

  (0, _ComponentUtils.$wrap)(resultComponent).onCallWrap(function (scope) {
    var _native = scope.native;
    var _params = scope.params;

    scope.position.set(_params.position.x, _params.position.y, _params.position.z);

    scope.rotation.set(_params.rotation.x, _params.rotation.y, _params.rotation.z);

    if (_params.useTarget) scope.lookAt(_params.target);
    if (_params.helper) scope.helper = new THREE.CameraHelper(_native);
  });

  return resultComponent;
}

exports.CameraComponent = CameraComponent;