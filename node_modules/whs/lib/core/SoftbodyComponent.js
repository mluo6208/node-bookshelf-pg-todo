'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SoftbodyComponent = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _ComponentUtils = require('../utils/ComponentUtils');

var _index = require('../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SoftbodyComponent(targetComponent) {
  var _class, _temp;

  var resultComponent = (_temp = _class = function (_targetComponent) {
    (0, _inherits3.default)(SoftbodyComponentEnhance, _targetComponent);

    function SoftbodyComponentEnhance() {
      (0, _classCallCheck3.default)(this, SoftbodyComponentEnhance);
      return (0, _possibleConstructorReturn3.default)(this, (SoftbodyComponentEnhance.__proto__ || Object.getPrototypeOf(SoftbodyComponentEnhance)).apply(this, arguments));
    }

    (0, _createClass3.default)(SoftbodyComponentEnhance, [{
      key: 'proccessSoftbodyGeometry',
      value: function proccessSoftbodyGeometry(geometry) {
        var _params = this.params;
        var matrix = new THREE.Matrix4();

        matrix.compose(new THREE.Vector3(_params.position.x, _params.position.y, _params.position.z), new THREE.Quaternion().setFromEuler(new THREE.Euler(_params.rotation.x, _params.rotation.y, _params.rotation.z)), new THREE.Vector3(_params.scale.x, _params.scale.y, _params.scale.z));

        geometry.applyMatrix(matrix);
      }
    }, {
      key: 'copy',
      value: function copy(source) {
        var sourceNative = source.native;

        if (sourceNative) {
          if (source.params.softbody) this.native = new sourceNative.constructor(sourceNative.tempGeometry.clone(), sourceNative.material, source.params);else this.native = sourceNative.clone(source.params);

          this.native.mass = sourceNative.mass;
          this.params = (0, _extends3.default)({}, source.params);

          this.wrap('no-transforms');

          this.position.copy(source.position);
          this.rotation.copy(source.rotation);
          this.quaternion.copy(source.quaternion);
        } else this.params = source.params;

        this.callCopy(this);

        return this;
      }
    }, {
      key: 'wrapTransforms',
      value: function wrapTransforms() {
        var _params = this.params;

        if (!_params.softbody) {
          var position = _params.position,
              rotation = _params.rotation,
              scale = _params.scale;

          this.position.set(position.x, position.y, position.z);

          this.rotation.set(rotation.x, rotation.y, rotation.z);

          this.scale.set(scale.x, scale.y, scale.z);
        }
      }
    }, {
      key: 'clone',
      value: function clone() {
        return this.params.softbody ? new resultComponent(this.params) : new resultComponent({ build: false }).copy(this);
      }
    }]);
    return SoftbodyComponentEnhance;
  }(targetComponent), _class.defautls = (0, _index.extend)(targetComponent.defaults, {
    softbody: false
  }), _temp);

  (0, _ComponentUtils.$wrap)(resultComponent).onCallAddTo(function (scope) {
    if (scope.params.softbody) {
      scope.native.position.set(0, 0, 0);
      scope.native.rotation.set(0, 0, 0);
    }
  });

  return resultComponent;
}

exports.SoftbodyComponent = SoftbodyComponent;