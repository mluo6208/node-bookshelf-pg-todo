'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightComponent = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _three = require('three');

var _ComponentUtils = require('../utils/ComponentUtils');

var _index = require('../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LightComponent(targetComponent) {
  var _class, _temp;

  var resultComponent = (_temp = _class = function (_targetComponent) {
    (0, _inherits3.default)(LightComponentEnhance, _targetComponent);

    function LightComponentEnhance() {
      (0, _classCallCheck3.default)(this, LightComponentEnhance);
      return (0, _possibleConstructorReturn3.default)(this, (LightComponentEnhance.__proto__ || Object.getPrototypeOf(LightComponentEnhance)).apply(this, arguments));
    }

    (0, _createClass3.default)(LightComponentEnhance, [{
      key: 'wrapShadow',
      value: function wrapShadow() {
        var _this2 = this;

        return new Promise(function (resolve) {
          var _native = _this2.native,
              _shadow = _this2.params.shadowmap;

          _native.castShadow = _shadow.cast;
          _native.shadow.mapSize.width = _shadow.width;
          _native.shadow.mapSize.height = _shadow.height;
          _native.shadow.bias = _shadow.bias;
          _native.shadow.radius = _shadow.radius;

          var _shadowCamera = _native.shadow.camera;

          _shadowCamera.near = _shadow.near;
          _shadowCamera.far = _shadow.far;
          _shadowCamera.fov = _shadow.fov;

          _shadowCamera.left = _shadow.left;
          _shadowCamera.right = _shadow.right;
          _shadowCamera.top = _shadow.top;
          _shadowCamera.bottom = _shadow.bottom;

          resolve(_this2);
        });
      }
    }, {
      key: 'wrapTransforms',
      value: function wrapTransforms() {
        var _params = this.params;

        this.position.set(_params.position.x, _params.position.y, _params.position.z);

        this.rotation.set(_params.rotation.x, _params.rotation.y, _params.rotation.z);
      }
    }, {
      key: 'copy',
      value: function copy(source) {
        if (source.native) {
          this.native = source.native.clone();
          this.params = (0, _extends3.default)({}, source.params);

          if (source.helper) this.helper = source.helper.clone();
          if (source.target) this.target = source.target.clone();
          this.wrap();

          this.position = source.position.clone();
          this.rotation = source.rotation.clone();
        } else this.params = source.params;

        this.callCopy(this);

        return this;
      }
    }, {
      key: 'addHelper',
      value: function addHelper(name) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var helpers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : resultComponent.helpers;

        (0, _get3.default)(LightComponentEnhance.prototype.__proto__ || Object.getPrototypeOf(LightComponentEnhance.prototype), 'addHelper', this).call(this, name, params, helpers);
      }
    }, {
      key: 'updateHelper',
      value: function updateHelper(name) {
        this._helpers[name].update();
      }
    }, {
      key: 'clone',
      value: function clone() {
        return new resultComponent({ build: false }).copy(this);
      }
    }, {
      key: 'position',
      get: function get() {
        return this.native.position;
      },
      set: function set(vector3) {
        this.native.position.copy(vector3);
        return this.native.position;
      }
    }, {
      key: 'quaternion',
      get: function get() {
        return this.native.quaternion;
      },
      set: function set(quaternion) {
        this.native.quaternion.copy(quaternion);
        return this.native.quaternion;
      }
    }, {
      key: 'rotation',
      get: function get() {
        return this._native.rotation;
      },
      set: function set(euler) {
        this.native.rotation.copy(euler);
        return this.native.rotation;
      }
    }, {
      key: 'target',
      get: function get() {
        return this.native.target;
      },
      set: function set(vector3) {
        if (vector3 instanceof _three.Object3D) this.native.target.copy(vector3); // THREE.Object3D in this case.
        else this.native.target.position.copy(vector3);
      }
    }]);
    return LightComponentEnhance;
  }(targetComponent), _class.defaults = (0, _index.extend)(targetComponent.defaults, {
    light: {
      color: 0xffffff,
      skyColor: 0xffffff,
      groundColor: 0xffffff,

      intensity: 1,
      distance: 100,
      angle: Math.PI / 3,
      exponent: 0,
      decay: 1
    },

    helper: false,

    shadowmap: {
      cast: true,

      bias: 0,
      radius: 1,

      width: 1024,
      height: 1024,

      near: true,
      far: 400,
      fov: 60,

      top: 200,
      bottom: -200,
      left: -200,
      right: 200
    },

    position: { x: 0, y: 0, z: 0 },
    rotation: { x: 0, y: 0, z: 0 }
  }), _class.instructions = function () {
    return targetComponent.instructions = (0, _extends3.default)({}, targetComponent.instructions, {
      position: ['x', 'y', 'z'],
      rotation: ['x', 'y', 'z']
    });
  }(), _temp);

  (0, _ComponentUtils.$wrap)(targetComponent).onCallConstructor(function (scope) {
    scope._helpers = {
      default: null
    };

    if (scope.params.helper) scope.addHelper('default', scope.params.helper);
  });

  (0, _ComponentUtils.$wrap)(targetComponent).onCallWrap(function (scope) {
    for (var _len = arguments.length, tags = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      tags[_key - 1] = arguments[_key];
    }

    if (tags.indexOf('no-shadows') < 0) scope.wrapShadow();
  });

  return resultComponent;
}

exports.LightComponent = LightComponent;