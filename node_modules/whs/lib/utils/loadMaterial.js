'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadMaterial = undefined;

var _three = require('three');

var loadMaterial = exports.loadMaterial = function loadMaterial() {
  var material = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (material instanceof _three.Material) return material;else {
    var materialThree = void 0;

    var params = Object.assign({}, material);

    delete params.kind;
    delete params.useCustomMaterial;
    delete params.useVertexColors;

    switch (material.kind) {
      case 'basic':
        materialThree = new _three.MeshBasicMaterial(params);
        break;

      case 'linebasic':
        materialThree = new _three.LineBasicMaterial(params);
        break;

      case 'linedashed':
        materialThree = new _three.LineDashedMaterial(params);
        break;

      case 'material':
        materialThree = new _three.Material(params);
        break;

      case 'depth':
        materialThree = new _three.MeshDepthMaterial(params);
        break;

      case 'face':
        materialThree = new _three.MeshFaceMaterial(params);
        break;

      case 'lambert':
        materialThree = new _three.MeshLambertMaterial(params);
        break;

      case 'normal':
        materialThree = new _three.MeshNormalMaterial(params);
        break;

      case 'phong':
        materialThree = new _three.MeshPhongMaterial(params);
        break;

      case 'points':
        materialThree = new _three.PointsMaterial(params);
        break;

      case 'standard':
        materialThree = new _three.MeshStandardMaterial(params);
        break;

      case 'pointcloud':
        materialThree = new _three.PointCloudMaterial(params);
        break;

      case 'rawshader':
        materialThree = new _three.RawShaderMaterial(params);
        break;

      case 'shader':
        materialThree = new _three.ShaderMaterial(params);
        break;

      case 'spritecanvas':
        materialThree = new _three.SpriteCanvasMaterial(params);
        break;

      case 'sprite':
        materialThree = new _three.SpriteMaterial(params);
        break;

      default:
        materialThree = new _three.MeshBasicMaterial(params);
        break;
    }

    return materialThree;
  }
};