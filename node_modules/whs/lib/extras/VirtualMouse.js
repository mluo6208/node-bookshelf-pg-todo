'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualMouse = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _minivents = require('minivents');

var _minivents2 = _interopRequireDefault(_minivents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VirtualMouse = exports.VirtualMouse = function (_Events) {
  (0, _inherits3.default)(VirtualMouse, _Events);

  function VirtualMouse(world) {
    (0, _classCallCheck3.default)(this, VirtualMouse);

    var _this = (0, _possibleConstructorReturn3.default)(this, (VirtualMouse.__proto__ || Object.getPrototypeOf(VirtualMouse)).call(this));

    _this.mouse = new THREE.Vector2();
    _this.raycaster = new THREE.Raycaster();
    _this.world = null;
    _this.projectionPlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);


    world.mouse = _this;
    _this.world = world;
    window.addEventListener('mousemove', _this.update.bind(_this));
    window.addEventListener('click', function () {
      return _this.emit('click');
    });
    window.addEventListener('mousedown', function () {
      return _this.emit('mousedown');
    });
    window.addEventListener('mouseup', function () {
      return _this.emit('mouseup');
    });
    return _this;
  }

  (0, _createClass3.default)(VirtualMouse, [{
    key: 'update',
    value: function update(e) {
      this.mouse.x = e.clientX / window.innerWidth * 2 - 1;
      this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
      this.projectionPlane.normal.copy(this.world.camera.native.getWorldDirection());

      this.raycaster.setFromCamera(this.mouse, this.world.camera.native);
      this.emit('move');
    }
  }, {
    key: 'track',
    value: function track(component) {
      var _this2 = this;

      var isHovered = false;

      this.on('move', function () {
        if (_this2.hovers(component)) {
          if (isHovered) component.emit('mousemove');else {
            component.emit('mouseover');
            isHovered = true;
          }
        } else if (isHovered) {
          component.emit('mouseout');
          isHovered = false;
        }
      });

      this.on('click', function () {
        if (isHovered) component.emit('click');
      });

      this.on('mousedown', function () {
        if (isHovered) component.emit('mousedown');
      });

      this.on('mouseup', function () {
        if (isHovered) component.emit('mouseup');
      });
    }
  }, {
    key: 'intersection',
    value: function intersection(component) {
      return this.raycaster.intersectObject(component.native);
    }
  }, {
    key: 'project',
    value: function project() {
      var plane = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.projectionPlane;

      return this.raycaster.ray.intersectPlane(plane);
    }
  }, {
    key: 'hovers',
    value: function hovers(component) {
      var intersection = this.intersection(component)[0];
      return intersection ? intersection.object === component.native : false;
    }
  }, {
    key: 'ray',
    get: function get() {
      return this.raycaster.ray;
    }
  }, {
    key: 'x',
    get: function get() {
      return this.mouse.x;
    }
  }, {
    key: 'y',
    get: function get() {
      return this.mouse.y;
    }
  }]);
  return VirtualMouse;
}(_minivents2.default);