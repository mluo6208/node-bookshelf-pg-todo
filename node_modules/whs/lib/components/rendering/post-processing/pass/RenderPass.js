'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RenderPass = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Pass2 = require('./Pass.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RenderPass = exports.RenderPass = function (_Pass) {
    (0, _inherits3.default)(RenderPass, _Pass);

    function RenderPass(name, scene, camera, overrideMaterial, clearColor, clearAlpha) {
        (0, _classCallCheck3.default)(this, RenderPass);

        var _this = (0, _possibleConstructorReturn3.default)(this, (RenderPass.__proto__ || Object.getPrototypeOf(RenderPass)).call(this, name));

        _this.scene = scene;
        _this.camera = camera;

        _this.overrideMaterial = overrideMaterial;

        _this.clearColor = clearColor;
        _this.clearAlpha = clearAlpha === undefined ? 0 : clearAlpha;

        _this.clear = true;
        _this.needsSwap = false;
        return _this;
    }

    (0, _createClass3.default)(RenderPass, [{
        key: 'render',
        value: function render(renderer, writeBuffer, readBuffer) {
            // REMARK: "maskActive" and "delta" never used. Removed.
            // render(renderer, writeBuffer, readBuffer, delta, maskActive) {

            var oldClearColor = void 0,
                oldClearAlpha = void 0;
            var oldAutoClear = renderer.autoClear;

            renderer.autoClear = false;
            this.scene.overrideMaterial = this.overrideMaterial;

            if (this.clearColor) {
                oldClearColor = renderer.getClearColor().getHex();
                oldClearAlpha = renderer.getClearAlpha();
                renderer.setClearColor(this.clearColor, this.clearAlpha);
            }

            renderer.render(this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear);

            if (this.clearColor) renderer.setClearColor(oldClearColor, oldClearAlpha);

            this.scene.overrideMaterial = null;
            renderer.autoClear = oldAutoClear;
        }
    }]);
    return RenderPass;
}(_Pass2.Pass); /**
                 * @author alteredq / http://alteredqualia.com/
                 * @author yannis torres / es6 migration
                 */