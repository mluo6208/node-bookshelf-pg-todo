'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShaderPass = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _Pass2 = require('./Pass.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author alteredq / http://alteredqualia.com/
 * @author yannis torres / es6 migration
 */

var ShaderPass = exports.ShaderPass = function (_Pass) {
  (0, _inherits3.default)(ShaderPass, _Pass);

  function ShaderPass(name, shader, textureID) {
    (0, _classCallCheck3.default)(this, ShaderPass);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ShaderPass.__proto__ || Object.getPrototypeOf(ShaderPass)).call(this, name));

    _this.textureID = textureID === undefined ? 'tDiffuse' : textureID;

    if (shader instanceof THREE.ShaderMaterial) {
      _this.uniforms = shader.uniforms;
      _this.material = shader;
    } else if (shader) {
      _this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);
      _this.material = new THREE.ShaderMaterial({
        defines: shader.defines || {},
        uniforms: _this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
    }

    _this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    _this.scene = new THREE.Scene();

    _this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);
    _this.scene.add(_this.quad);
    return _this;
  }

  (0, _createClass3.default)(ShaderPass, [{
    key: 'render',
    value: function render(renderer, writeBuffer, readBuffer) {
      // REMARK: "maskActive" and "delta" never used. Removed.
      // render(renderer, writeBuffer, readBuffer, delta, maskActive) {

      if (this.uniforms[this.textureID]) this.uniforms[this.textureID].value = readBuffer.texture;

      this.quad.material = this.material;

      if (this.renderToScreen) renderer.render(this.scene, this.camera);else renderer.render(this.scene, this.camera, writeBuffer, this.clear);
    }
  }]);
  return ShaderPass;
}(_Pass2.Pass);