"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pass = undefined;

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Pass = exports.Pass = function () {
  function Pass(name) {
    (0, _classCallCheck3.default)(this, Pass);

    this.uniqName = name === undefined ? 'pass_' + ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1) : name;

    // if set to true, the pass is processed by the composer
    this.enabled = true;

    // if set to true, the pass indicates to swap read and write buffer after rendering
    this.needsSwap = true;

    // if set to true, the pass clears its buffer before rendering
    this.clear = false;

    // if set to true, the result of the pass is rendered to screen
    this.renderToScreen = false;
  }

  /**
   * Resize a pass.
   * @param {Number} width : in pixels.
   * @param {Number} height : in pixels.
   */


  (0, _createClass3.default)(Pass, [{
    key: "setSize",
    value: function setSize(width, height) {}

    /**
     * Render a pass
     * @param  {THREE.WebGLRenderer} renderer : The renderer used to render the pass objects.
     * @param  {THREE.WebGLRenderTarget.Buffer} writeBuffer : The write buffer used to do buffer swapping.
     * @param  {THREE.WebGLRenderTarget.Buffer} readBuffer  : The read buffer used to do buffer swapping.
     * @param  {Number} delta : The delta time since the previous frame.
     * @param  {Boolean} maskActive : Flag indicating the Composer that this pass use masking.
     */

  }, {
    key: "render",
    value: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {
      console.error("Pass: .render() must be implemented in derived pass.");
    }

    /**
     * Get the name of the pass
     * @return {String} Unique name
     */

  }, {
    key: "name",
    get: function get() {
      return this.uniqName;
    }
  }]);
  return Pass;
}();