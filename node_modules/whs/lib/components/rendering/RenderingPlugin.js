'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderingPlugin = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _class;

var _three = require('three');

var THREE = _interopRequireWildcard(_three);

var _stats = require('stats.js');

var _stats2 = _interopRequireDefault(_stats);

var _Component2 = require('../../core/Component');

var _RenderingComponent = require('../../core/RenderingComponent');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RenderingPlugin = (0, _RenderingComponent.RenderingComponent)(_class = function (_Component) {
  (0, _inherits3.default)(RenderingPlugin, _Component);

  function RenderingPlugin() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, RenderingPlugin);

    var _this = (0, _possibleConstructorReturn3.default)(this, (RenderingPlugin.__proto__ || Object.getPrototypeOf(RenderingPlugin)).call(this, params, RenderingPlugin.defaults, RenderingPlugin.instructions));

    _this.build(params);
    (0, _get3.default)(RenderingPlugin.prototype.__proto__ || Object.getPrototypeOf(RenderingPlugin.prototype), 'wrap', _this).call(_this);
    return _this;
  }

  (0, _createClass3.default)(RenderingPlugin, [{
    key: '_attachToCanvas',
    value: function _attachToCanvas() {
      if (this._parentWorld) {}
      // TODO: detach from dom


      // attach to new parent world dom
      this._parentWorld._dom.appendChild(this.renderer.domElement);
      this.renderer.domElement.style.width = '100%';
      this.renderer.domElement.style.height = '100%';
    }
  }, {
    key: '_initStats',
    value: function _initStats() {
      var params = this.params;

      if (params.stats) {
        this.stats = new _stats2.default();

        if (params.stats === 'fps') this.stats.setMode(0);else if (params.stats === 'ms') this.stats.setMode(1);else if (params.stats === 'mb') this.stats.setMode(1);else {
          this.stats.setMode(0);
          console.warn([this.stats], 'Please, apply stats mode [fps, ms, mb] .');
        }

        this.stats.domElement.style.position = 'absolute';
        this.stats.domElement.style.left = '0px';
        this.stats.domElement.style.bottom = '0px';

        this._parentWorld._dom.appendChild(this.stats.domElement);
      }
    }
  }, {
    key: 'build',
    value: function build() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      throw new Error('Build method has to be re-implemented in each rendering plugin (use it to initialize your rendering plugin!)');
    }
  }, {
    key: 'onParentWorldChanged',
    value: function onParentWorldChanged() {}
  }, {
    key: 'renderPlugin',
    value: function renderPlugin(delta) {
      throw new Error('renderPlugin method has to be re-implemented in each rendering plugin (or else your plugin won\'t do anything!)');
    }
  }, {
    key: 'setSize',
    value: function setSize(width, height) {
      throw new Error('setSize method has to be re-implemented in each rendering plugin (or else your plugin won\'t resize!)');
    }
  }, {
    key: 'start',
    value: function start(onStartRendering, onFinishRendering) {
      this.clock = new THREE.Clock();

      window.requestAnimFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
          window.setTimeout(callback, 1000 / 60);
        };
      }();

      this.onStartRendering = onStartRendering;
      this.onFinishRendering = onFinishRendering;
      this.render();
    }
  }, {
    key: 'render',
    value: function render() {
      window.requestAnimFrame(this.render.bind(this));

      var delta = this.clock.getDelta();

      // Init stats.
      if (this.stats) this.stats.begin();

      if (this.onStartRendering) this.onStartRendering(delta);

      this.renderPlugin(delta);

      if (this.onFinishRendering) this.onFinishRendering(delta);

      // End helper.
      if (this.stats) this.stats.end();
    }
  }, {
    key: 'parentWorld',
    get: function get() {
      return this._parentWorld;
    },
    set: function set(world) {
      var params = this.params;

      this._parentWorld = world;
      this._attachToCanvas();

      if (params.init && params.init.stats) this._initStats();

      this.onParentWorldChanged();
    }
  }]);
  return RenderingPlugin;
}(_Component2.Component)) || _class;

exports.RenderingPlugin = RenderingPlugin;