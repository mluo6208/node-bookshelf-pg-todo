'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ring = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _class, _class2, _temp;

var _three = require('three');

var _Component2 = require('../../core/Component');

var _MeshComponent = require('../../core/MeshComponent');

var _index = require('../../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Ring = (0, _MeshComponent.MeshComponent)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(Ring, _Component);

  function Ring() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Ring);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Ring.__proto__ || Object.getPrototypeOf(Ring)).call(this, params, Ring.defaults, Ring.instructions));

    if (params.build) {
      _this.build(params);
      (0, _get3.default)(Ring.prototype.__proto__ || Object.getPrototypeOf(Ring.prototype), 'wrap', _this).call(_this);
    }
    return _this;
  }

  (0, _createClass3.default)(Ring, [{
    key: 'build',
    value: function build() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var material = (0, _index.loadMaterial)(params.material);

      return new Promise(function (resolve) {
        _this2.native = new _three.Mesh(new _three.RingGeometry(params.geometry.innerRadius, params.geometry.outerRadius, params.geometry.thetaSegments, params.geometry.phiSegments, params.geometry.thetaStart, params.geometry.thetaLength), material);

        resolve();
      });
    }
  }, {
    key: 'buildGeometry',
    value: function buildGeometry() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var GConstruct = params.buffer && !params.softbody ? _three.RingBufferGeometry : _three.RingGeometry;

      return new GConstruct(params.geometry.innerRadius, params.geometry.outerRadius, params.geometry.thetaSegments, params.geometry.phiSegments, params.geometry.thetaStart, params.geometry.thetaLength);
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new Ring({ build: false }).copy(this);
    }
  }, {
    key: 'g_innerRadius',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { innerRadius: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.innerRadius;
    }
  }, {
    key: 'g_outerRadius',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { outerRadius: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.outerRadius;
    }
  }, {
    key: 'g_thetaSegments',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { thetaSegments: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.thetaSegments;
    }
  }, {
    key: 'g_phiSegments',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { phiSegments: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.phiSegments;
    }
  }, {
    key: 'g_thetaStart',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { thetaStart: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.thetaStart;
    }
  }, {
    key: 'g_thetaLength',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { thetaLength: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.thetaLength;
    }
  }]);
  return Ring;
}(_Component2.Component), _class2.defaults = (0, _extends3.default)({}, _Component2.Component.defaults, {
  geometry: {
    innerRadius: 0,
    outerRadius: 50,
    thetaSegments: 8,
    phiSegments: 8,
    thetaStart: 0,
    thetaLength: Math.PI * 2
  }
}), _class2.defaults = (0, _extends3.default)({}, _Component2.Component.defaults, {
  geometry: ['innerRadius', 'outerRadius', 'thetaSegments', 'phiSegments', 'thetaStart', 'thetaLength']
}), _temp)) || _class;

exports.Ring = Ring;