'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Model = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _class, _class2, _temp;

var _three = require('three');

var _index = require('../../physics/index.js');

var _Component2 = require('../../core/Component');

var _MeshComponent = require('../../core/MeshComponent');

var _PhysicsComponent = require('../../core/PhysicsComponent');

var _SoftbodyComponent = require('../../core/SoftbodyComponent');

var _index2 = require('../../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Model = (0, _SoftbodyComponent.SoftbodyComponent)(_class = (0, _PhysicsComponent.PhysicsComponent)(_class = (0, _MeshComponent.MeshComponent)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(Model, _Component);

  function Model() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Model);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this, params, Model.defaults, Model.instructions));

    if (params.build) {
      _this.build(params);
      (0, _get3.default)(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'wrap', _this).call(_this);
    }
    return _this;
  }

  (0, _createClass3.default)(Model, [{
    key: 'build',
    value: function build() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var MeshNative = void 0;

      if (this.physics && params.physics.type === 'concave') MeshNative = _index.ConcaveMesh;else if (this.physics) MeshNative = _index.ConvexMesh;else MeshNative = _three.Mesh;

      var promise = new Promise(function (resolve) {
        var pGeometry = params.geometry;
        var Loader = pGeometry.loader;

        Loader.load(pGeometry.path, function (data, materials) {
          if (pGeometry.physics) {
            Loader.load(pGeometry.physics, function (data2) {
              var material = void 0;

              if (params.material.useVertexColors) {
                material = (0, _index2.loadMaterial)(extend(params.material, {
                  morphTargets: true,
                  vertexColors: _three.FaceColors
                }));
              } else if (!materials || params.material.useCustomMaterial) {
                material = (0, _index2.loadMaterial)(params.material);
              } else material = new _three.MultiMaterial(materials);

              data.computeFaceNormals();
              data.computeVertexNormals();

              _this2.native = new MeshNative(data, material, _this2.params, data2);

              resolve();
            });
          } else {
            var material = void 0;

            if (params.material.useVertexColors) {
              material = (0, _index2.loadMaterial)(extend(params.material, {
                morphTargets: true,
                vertexColors: _three.FaceColors
              }));
            } else if (!materials || params.material.useCustomMaterial) {
              material = (0, _index2.loadMaterial)(params.material);
            } else material = new _three.MultiMaterial(materials);

            data.computeFaceNormals();
            data.computeVertexNormals();

            console.log(_this2.params);

            _this2.native = new MeshNative(data, material, _this2.params);

            resolve();
          }
        });
      });

      (0, _get3.default)(Model.prototype.__proto__ || Object.getPrototypeOf(Model.prototype), 'wait', this).call(this, promise);

      return promise;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return new Model({ build: false }).copy(this);
    }
  }]);
  return Model;
}(_Component2.Component), _class2.defaults = (0, _extends3.default)({}, _Component2.Component.defaults, {
  geometry: {
    path: '',
    physics: '',
    loader: _index2.JSONLoader
  }
}), _class2.instructions = (0, _extends3.default)({}, _Component2.Component.instructions, {
  geometry: ['path', 'physics', 'loader']
}), _temp)) || _class) || _class) || _class;

exports.Model = Model;