'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sphere = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _class, _class2, _temp;

var _three = require('three');

var _index = require('../../physics/index.js');

var _Component2 = require('../../core/Component');

var _MeshComponent = require('../../core/MeshComponent');

var _PhysicsComponent = require('../../core/PhysicsComponent');

var _SoftbodyComponent = require('../../core/SoftbodyComponent');

var _index2 = require('../../utils/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Sphere = (0, _SoftbodyComponent.SoftbodyComponent)(_class = (0, _PhysicsComponent.PhysicsComponent)(_class = (0, _MeshComponent.MeshComponent)(_class = (_temp = _class2 = function (_Component) {
  (0, _inherits3.default)(Sphere, _Component);

  function Sphere() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Sphere);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Sphere.__proto__ || Object.getPrototypeOf(Sphere)).call(this, params, Sphere.defaults, Sphere.instructions));

    if (params.build) {
      _this.build(params);
      (0, _get3.default)(Sphere.prototype.__proto__ || Object.getPrototypeOf(Sphere.prototype), 'wrap', _this).call(_this);
    }
    return _this;
  }

  (0, _createClass3.default)(Sphere, [{
    key: 'build',
    value: function build() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.params;

      var material = (0, _index2.loadMaterial)(params.material);

      var MeshNative = void 0;

      if (this.physics && this.params.softbody) MeshNative = _index.SoftMesh;else if (this.physics) MeshNative = _index.SphereMesh;else MeshNative = _three.Mesh;

      return new Promise(function (resolve) {
        _this2.native = new MeshNative(_this2.buildGeometry(params), material, _this2.params);

        resolve();
      });
    }
  }, {
    key: 'buildGeometry',
    value: function buildGeometry() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var GConstruct = params.buffer && !params.softbody ? _three.SphereBufferGeometry : _three.SphereGeometry;

      var geometry = new GConstruct(params.geometry.radius, params.geometry.widthSegments, params.geometry.heightSegments);

      if (params.softbody) this.proccessSoftbodyGeometry(geometry);

      return geometry;
    }
  }, {
    key: 'clone',
    value: function clone() {
      return this.params.softbody ? new Sphere(this.params) : new Sphere({ build: false }).copy(this);
    }
  }, {
    key: 'g_radius',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { radius: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.radius;
    }
  }, {
    key: 'g_widthSegments',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { widthSegments: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.widthSegments;
    }
  }, {
    key: 'g_heightSegments',
    set: function set(val) {
      this._native.geometry = this.buildGeometry(this.updateParams({ geometry: { widthSegments: val } }));
    },
    get: function get() {
      return this._native.geometry.parameters.widthSegments;
    }
  }]);
  return Sphere;
}(_Component2.Component), _class2.defaults = (0, _extends3.default)({}, _Component2.Component.defaults, {
  geometry: {
    radius: 1,
    widthSegments: 8,
    heightSegments: 6
  }
}), _class2.instructions = (0, _extends3.default)({}, _Component2.Component.instructions, {
  geometry: ['radius', 'widthSegments', 'heightSegments']
}), _temp)) || _class) || _class) || _class;

exports.Sphere = Sphere;